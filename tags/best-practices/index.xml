<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>best practices on chischaschos rocks</title><link>//chischaschos.github.io/tags/best-practices/</link><description>Recent content in best practices on chischaschos rocks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 07 Feb 2016 20:49:58 -0600</lastBuildDate><atom:link href="//chischaschos.github.io/tags/best-practices/index.xml" rel="self" type="application/rss+xml"/><item><title>RSpec and the Four Phase Tests</title><link>//chischaschos.github.io/post/rspec-antipatterns/</link><pubDate>Sun, 07 Feb 2016 20:49:58 -0600</pubDate><guid>//chischaschos.github.io/post/rspec-antipatterns/</guid><description>Motivation I want to know what are the best practices to write RSpec tests when striving for a Four Phase Test.
What the internet says about it? https://thoughtbot.com/upcase/videos/four-phases-of-testing. https://robots.thoughtbot.com/how-we-test-rails-applications http://code.tutsplus.com/articles/rspec-testing-for-beginners-part-1--cms-26716 http://www.justinweiss.com/articles/writing-better-tests-with-the-three-phase-pattern/ Notes let may be lazy and convenient. If another developer comes and looks at the it, he will see a mystery guest. You create a DSL within RSpec, DSL puzzle. Each piece of indirection improves high level view, but makes it more complex when you have to change it.</description></item></channel></rss>